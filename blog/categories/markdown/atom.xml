<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Markdown | My Web Adventures]]></title>
  <link href="http://AydinSakar.github.io/blog/categories/markdown/atom.xml" rel="self"/>
  <link href="http://AydinSakar.github.io/"/>
  <updated>2013-07-18T20:37:01-04:00</updated>
  <id>http://AydinSakar.github.io/</id>
  <author>
    <name><![CDATA[AydÄ±n Sakar]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Code Blocks Options with Octopress]]></title>
    <link href="http://AydinSakar.github.io/blog/2013/07/17/code-blocks-options-with-octopress/"/>
    <updated>2013-07-17T17:11:00-04:00</updated>
    <id>http://AydinSakar.github.io/blog/2013/07/17/code-blocks-options-with-octopress</id>
    <content type="html"><![CDATA[<p>I actually figured out several different options that we can use to insert code blocks with <a href="http://octopress.org/" title="Octopress">Octopress</a></p>

<h3>1. Markdown codeblocks:</h3>

<p>We have to use 4 spaces or 1 tab to designate that this is a codeblock.</p>

<pre><code>    var respond = function(response, data, err) {
        var responseObj = {data: data, error: err};
        response.writeHead(200, {"Content-Type":"application/json"});
        response.write(JSON.stringify(responseObj));
        response.end();
    };
    var arr1 = new Array(arrayLength);
    var arr2 = new Array(element0, element1, ..., elementN);
</code></pre>

<p>And this is what we get with the 4 spaces, or the tabs removed from the start of the line.</p>

<pre><code>var respond = function(response, data, err) {
    var responseObj = {data: data, error: err};
    response.writeHead(200, {"Content-Type":"application/json"});
    response.write(JSON.stringify(responseObj));
    response.end();
};
var arr1 = new Array(arrayLength);
var arr2 = new Array(element0, element1, ..., elementN);
</code></pre>

<p>And this is the HTML that is written for you:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>HTML Result </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;pre&gt;&lt;code&gt;</span>var respond = function(response, data, err) {
</span><span class='line'>    var responseObj = {data: data, error: err};
</span><span class='line'>    response.writeHead(200, {&quot;Content-Type&quot;:&quot;application/json&quot;});
</span><span class='line'>    response.write(JSON.stringify(responseObj));
</span><span class='line'>    response.end();
</span><span class='line'>};
</span><span class='line'>var arr1 = new Array(arrayLength);
</span><span class='line'>var arr2 = new Array(element0, element1, ..., elementN);
</span><span class='line'><span class="nt">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;p&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h3>2. Backtick Code Blocks (GitHub Flavored Markdown):</h3>

<pre><code>``` [language] [title] [url] [link text]
var respond = function(response, data, err) {
    var responseObj = {data: data, error: err};
    response.writeHead(200, {"Content-Type":"application/json"});
    response.write(JSON.stringify(responseObj));
    response.end();
};
var arr1 = new Array(arrayLength);
var arr2 = new Array(element0, element1, ..., elementN);
```    
</code></pre>

<p>``` javascript Backtick Code Blocks (GitHub Flavored Markdown)
var respond = function(response, data, err) {</p>

<pre><code>var responseObj = {data: data, error: err};
response.writeHead(200, {"Content-Type":"application/json"});
response.write(JSON.stringify(responseObj));
response.end();
</code></pre>

<p>};
var arr1 = new Array(arrayLength);
var arr2 = new Array(element0, element1, &hellip;, elementN);
```</p>

<h3>3. Codeblocks</h3>

<p></p>

<pre><code>{% codeblock [title] [lang:language] [url] [link text] %}
var respond = function(response, data, err) {
    var responseObj = {data: data, error: err};
    response.writeHead(200, {"Content-Type":"application/json"});
    response.write(JSON.stringify(responseObj));
    response.end();
};
{% endcodeblock %}
</code></pre>

<p></p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Javascript Example </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">respond</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">response</span><span class="p">,</span> <span class="nx">data</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span> <span class="p">{</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="kd">var</span> <span class="nx">responseObj</span> <span class="o">=</span> <span class="p">{</span><span class="nx">data</span><span class="o">:</span> <span class="nx">data</span><span class="p">,</span> <span class="nx">error</span><span class="o">:</span> <span class="nx">err</span><span class="p">};</span>
</span><span class='line'><span class="nx">response</span><span class="p">.</span><span class="nx">writeHead</span><span class="p">(</span><span class="mi">200</span><span class="p">,</span> <span class="p">{</span><span class="s2">&quot;Content-Type&quot;</span><span class="o">:</span><span class="s2">&quot;application/json&quot;</span><span class="p">});</span>
</span><span class='line'><span class="nx">response</span><span class="p">.</span><span class="nx">write</span><span class="p">(</span><span class="nx">JSON</span><span class="p">.</span><span class="nx">stringify</span><span class="p">(</span><span class="nx">responseObj</span><span class="p">));</span>
</span><span class='line'><span class="nx">response</span><span class="p">.</span><span class="nx">end</span><span class="p">();</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="p">};</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">arr1</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Array</span><span class="p">(</span><span class="nx">arrayLength</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">arr2</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Array</span><span class="p">(</span><span class="nx">element0</span><span class="p">,</span> <span class="nx">element1</span><span class="p">,</span> <span class="o">&amp;</span><span class="nx">hellip</span><span class="p">;,</span> <span class="nx">elementN</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h4>Note:</h4>

<p>For code-coloring to work, be sure you have Python27 at your Path.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[My Markdown Cheatsheet]]></title>
    <link href="http://AydinSakar.github.io/blog/2013/07/17/my-markdown-cheatsheet/"/>
    <updated>2013-07-17T15:49:00-04:00</updated>
    <id>http://AydinSakar.github.io/blog/2013/07/17/my-markdown-cheatsheet</id>
    <content type="html"><![CDATA[<p>Since this blog will also serve as my cheatsheets repository for everything I want to remember, here is my <a href="http://daringfireball.net/projects/markdown/syntax" title="Markdown">markdown</a> cheatsheet:</p>

<ul>
<li>Whenever an indentation is needed it is allways <strong>1 tab</strong> or <strong>4 spaces</strong> in markdown.</li>
</ul>


<h5>Headers:</h5>

<p>```</p>

<h1>h1 Header</h1>

<h2>h2 Header</h2>

<h3>h3 Header</h3>

<h4>h4 Header</h4>

<h5>h5 Header</h5>

<h6>h6 Header</h6>

<p>```</p>

<h1>h1 Header</h1>

<h2>h2 Header</h2>

<h3>h3 Header</h3>

<h4>h4 Header</h4>

<h5>h5 Header</h5>

<h6>h6 Header</h6>

<h4>Lists:</h4>

<p><code>
* first item
* second item
* third item
or
- first item
- second item
- third item
or
+ first item
+ second item
+ third item
</code>
* first item
* second item
* third item</p>

<h4>Numbered Lists</h4>

<p><code>
1. first item
2. second item
3. third item
</code>
1. first item
2. second item
3. third item</p>

<h4>Mix Lists</h4>

<p>```
1. first item</p>

<pre><code>+ first item
+ second item
+ third item
</code></pre>

<ol>
<li>second item</li>
<li>third item
```</li>
<li>first item

<ul>
<li>first item</li>
<li>second item</li>
<li>third item</li>
</ul>
</li>
<li>second item</li>
<li>third item</li>
</ol>


<h4>Emphasis/Strong</h4>

<p><code>
*emphasized*
_emphasized_
**strong**
__strong__
***strong emphasized***
___strong emphasized___
</code>
<em>emphasized</em><br/>
<strong>strong</strong><br/>
<strong><em>strong emphasized</em></strong></p>

<h4>Code Blocks:</h4>

<p>```</p>

<pre><code>This is a code block indented by 4 spaces
</code></pre>

<p>```</p>

<pre><code>This is a code block indented by 4 spaces and the spaces removed
</code></pre>

<h4>Blockquotes:</h4>

<p>```</p>

<blockquote><p>This is a blockquote with two paragraphs. Lorem ipsum dolor sit amet,
consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus.
Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus.</p>

<p>Donec sit amet nisl. Aliquam semper ipsum sit amet velit. Suspendisse
id sem consectetuer libero luctus adipiscing.
```
This is a blockquote with two paragraphs. Lorem ipsum dolor sit amet,
consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus.
Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus.</p>

<p>Donec sit amet nisl. Aliquam semper ipsum sit amet velit. Suspendisse
id sem consectetuer libero luctus adipiscing.</p></blockquote>

<h4>Markdown in Blockquotes:</h4>

<p>```</p>

<blockquote><h2>This is a header.</h2>

<ol>
<li> This is the first list item.</li>
<li> This is the second list item.</li>
</ol>


<p>Here&rsquo;s some example code:</p>

<pre><code>return shell_exec("echo $input | $markdown_script");
</code></pre>

<p>```</p>

<h2>This is a header.</h2>

<ol>
<li> This is the first list item.</li>
<li> This is the second list item.</li>
</ol>


<p>Here&rsquo;s some example code:</p>

<pre><code>return shell_exec("echo $input | $markdown_script");
</code></pre></blockquote>

<h4>Blockquote in blockquote:</h4>

<p>```</p>

<blockquote><p>This is the first level of quoting.</p>

<blockquote><p>This is nested blockquote.</p></blockquote>

<p>Back to the first level.
```</p>

<p>This is the first level of quoting.</p>

<blockquote><p>This is nested blockquote.</p></blockquote>

<p>Back to the first level.</p></blockquote>
]]></content>
  </entry>
  
</feed>
