<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Octopress | My Web Adventures]]></title>
  <link href="http://AydinSakar.github.io/blog/categories/octopress/atom.xml" rel="self"/>
  <link href="http://AydinSakar.github.io/"/>
  <updated>2013-07-28T00:08:01-04:00</updated>
  <id>http://AydinSakar.github.io/</id>
  <author>
    <name><![CDATA[AydÄ±n Sakar]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[URL Magic]]></title>
    <link href="http://AydinSakar.github.io/blog/2013/07/19/url-magic/"/>
    <updated>2013-07-19T10:19:00-04:00</updated>
    <id>http://AydinSakar.github.io/blog/2013/07/19/url-magic</id>
    <content type="html"><![CDATA[<p>I just wanted to check if I can see my blog without a Web Server.</p>

<p>This is what I got when I clicked on the <code>index.html</code>:</p>

<p><img src="/images/blog_in_chrome.png" title="My Poor Web Site" ></p>

<p>When I checked the source I found out that all the links were as:</p>

<pre><code>href="http://AydinSakar.github.io/blog/2013/07/18/windows-7-path-tricks/"
</code></pre>

<p>So we need a short cheatsheet for URLs in Web pages:</p>

<h2>Absolute URLs:</h2>

<p>Absolute URLs have the format:</p>

<pre><code>protocol://domain/path
</code></pre>

<p>where the protocol can be:</p>

<ul>
<li>http</li>
<li>https</li>
<li>ftp</li>
<li>file</li>
<li>git</li>
</ul>


<h2>Relative URLs:</h2>

<p>Relative URLs have a number of formats:</p>

<pre><code>filename.html
directoryname/filename.html
../directoryname/filename.html

/directoryname/filename.html
/directoryname/subdirectoryname/
</code></pre>

<p>In the first three cases everything is relative to referring page.</p>

<p><code>filename.html</code> should be in the same directory with the referring page.</p>

<p><code>directory/filename.html</code> filename.html should be in the directoryname directory which is in the referring page&rsquo;s directory.</p>

<p><code>../</code> is for one directory up from referring page&rsquo;s directory</p>

<p>When we have <code>/</code> at the beginning of directoryname, we are refering to current root of the Web Server. This relative path is actually relative to root of the server, not relative to referring page.</p>

<p>Finally, when our URL ends with <code>/</code>, Web Servers actually try to fetch the default page (which is normally index.html).</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Why Static Site Generation?]]></title>
    <link href="http://AydinSakar.github.io/blog/2013/07/18/why-static-site-generation/"/>
    <updated>2013-07-18T10:46:00-04:00</updated>
    <id>http://AydinSakar.github.io/blog/2013/07/18/why-static-site-generation</id>
    <content type="html"><![CDATA[<p>I have a personal blog on Blogger, which I never felt very easy about. Writing and posting on the Blogger interface and having all the content at their server and not having the posts on a version control etc., all made me uncomfortable.</p>

<p>Then, I discovered GitHub pages and Octopress and everything felt very natural.</p>

<p>Brent Simmons had written all about this static site generation and blogging system back in</p>

<ol>
<li>2009: <a href="http://inessential.com/2009/01/30/new_publishing_system_tour_of_my_head">New publishing system / tour of my head</a></li>
<li>and 2011: <a href="http://inessential.com/2011/03/16/a_plea_for_baked_weblogs">A plea for baked weblogs</a></li>
<li>and: <a href="http://inessential.com/2011/03/17/more_on_baked_blogs">More on baked blogs</a></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Code Blocks Options with Octopress]]></title>
    <link href="http://AydinSakar.github.io/blog/2013/07/17/code-blocks-options-with-octopress/"/>
    <updated>2013-07-17T17:11:00-04:00</updated>
    <id>http://AydinSakar.github.io/blog/2013/07/17/code-blocks-options-with-octopress</id>
    <content type="html"><![CDATA[<p>I actually figured out several different options that we can use to insert code blocks with <a href="http://octopress.org/" title="Octopress">Octopress</a></p>

<h3>1. Markdown codeblocks:</h3>

<p>We have to use 4 spaces or 1 tab to designate that this is a codeblock.</p>

<pre><code>    var respond = function(response, data, err) {
        var responseObj = {data: data, error: err};
        response.writeHead(200, {"Content-Type":"application/json"});
        response.write(JSON.stringify(responseObj));
        response.end();
    };
    var arr1 = new Array(arrayLength);
    var arr2 = new Array(element0, element1, ..., elementN);
</code></pre>

<p>And this is what we get with the 4 spaces, or the tabs removed from the start of the line.</p>

<pre><code>var respond = function(response, data, err) {
    var responseObj = {data: data, error: err};
    response.writeHead(200, {"Content-Type":"application/json"});
    response.write(JSON.stringify(responseObj));
    response.end();
};
var arr1 = new Array(arrayLength);
var arr2 = new Array(element0, element1, ..., elementN);
</code></pre>

<p>And this is the HTML that is written for you:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>HTML Result </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;pre&gt;&lt;code&gt;</span>var respond = function(response, data, err) {
</span><span class='line'>    var responseObj = {data: data, error: err};
</span><span class='line'>    response.writeHead(200, {&quot;Content-Type&quot;:&quot;application/json&quot;});
</span><span class='line'>    response.write(JSON.stringify(responseObj));
</span><span class='line'>    response.end();
</span><span class='line'>};
</span><span class='line'>var arr1 = new Array(arrayLength);
</span><span class='line'>var arr2 = new Array(element0, element1, ..., elementN);
</span><span class='line'><span class="nt">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;p&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h3>2. Backtick Code Blocks (GitHub Flavored Markdown):</h3>

<pre><code>``` [language] [title] [url] [link text]
var respond = function(response, data, err) {
    var responseObj = {data: data, error: err};
    response.writeHead(200, {"Content-Type":"application/json"});
    response.write(JSON.stringify(responseObj));
    response.end();
};
var arr1 = new Array(arrayLength);
var arr2 = new Array(element0, element1, ..., elementN);
```    
</code></pre>

<p>``` javascript Backtick Code Blocks (GitHub Flavored Markdown)
var respond = function(response, data, err) {</p>

<pre><code>var responseObj = {data: data, error: err};
response.writeHead(200, {"Content-Type":"application/json"});
response.write(JSON.stringify(responseObj));
response.end();
</code></pre>

<p>};
var arr1 = new Array(arrayLength);
var arr2 = new Array(element0, element1, &hellip;, elementN);
```</p>

<h3>3. Codeblocks</h3>

<p></p>

<pre><code>{% codeblock [title] [lang:language] [url] [link text] %}
var respond = function(response, data, err) {
    var responseObj = {data: data, error: err};
    response.writeHead(200, {"Content-Type":"application/json"});
    response.write(JSON.stringify(responseObj));
    response.end();
};
{% endcodeblock %}
</code></pre>

<p></p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Javascript Example </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">respond</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">response</span><span class="p">,</span> <span class="nx">data</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span> <span class="p">{</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="kd">var</span> <span class="nx">responseObj</span> <span class="o">=</span> <span class="p">{</span><span class="nx">data</span><span class="o">:</span> <span class="nx">data</span><span class="p">,</span> <span class="nx">error</span><span class="o">:</span> <span class="nx">err</span><span class="p">};</span>
</span><span class='line'><span class="nx">response</span><span class="p">.</span><span class="nx">writeHead</span><span class="p">(</span><span class="mi">200</span><span class="p">,</span> <span class="p">{</span><span class="s2">&quot;Content-Type&quot;</span><span class="o">:</span><span class="s2">&quot;application/json&quot;</span><span class="p">});</span>
</span><span class='line'><span class="nx">response</span><span class="p">.</span><span class="nx">write</span><span class="p">(</span><span class="nx">JSON</span><span class="p">.</span><span class="nx">stringify</span><span class="p">(</span><span class="nx">responseObj</span><span class="p">));</span>
</span><span class='line'><span class="nx">response</span><span class="p">.</span><span class="nx">end</span><span class="p">();</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="p">};</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">arr1</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Array</span><span class="p">(</span><span class="nx">arrayLength</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">arr2</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Array</span><span class="p">(</span><span class="nx">element0</span><span class="p">,</span> <span class="nx">element1</span><span class="p">,</span> <span class="o">&amp;</span><span class="nx">hellip</span><span class="p">;,</span> <span class="nx">elementN</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h4>Note:</h4>

<p>For code-coloring to work, be sure you have Python27 at your Path.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Octopress]]></title>
    <link href="http://AydinSakar.github.io/blog/2013/07/17/octopress/"/>
    <updated>2013-07-17T11:50:00-04:00</updated>
    <id>http://AydinSakar.github.io/blog/2013/07/17/octopress</id>
    <content type="html"><![CDATA[<p>I am using <a href="http://octopress.org/" title="Octopress">Octopress</a> to publish this blog.</p>

<p>I am using Windows 7 for daily work so had to install Octopress and GitHub on a Windows machine. I am planning to write a series of tutorials on the problems I faced making all work together with Windows.</p>

<hr />

<p>I just want to make a brief note about the confusion I had when I tried to understand Octopress: The repository structure.</p>

<p>You have to have username.github.io named repository at <a href="https://github.com/" title="GitHub">GitHub</a> to use GitHub Pages. The repository of this blog is: <a href="https://github.com/AydinSakar/aydinsakar.github.io">https://github.com/AydinSakar/aydinsakar.github.io</a> You can also have project pages, but that is another topic for a blog post.</p>

<p>Octopress manages two branches in your username.github.io repository:</p>

<ol>
<li><p>master branch:</p>

<p> This is the actual branch that GitHub uses to publish your blog. When Github sees a push to this branch, they republish your content.</p></li>
<li><p>source branch:</p>

<p> This contains the source of Octopress <em>AND</em> your blog posts. Octopress generates the content from this branch and puts everything in a &ldquo;_deploy&rdquo; directory which is the actual &ldquo;master&rdquo; branch which is then pushed to GitHub. You have to remember to commit and push the &ldquo;source&rdquo; branch yourself.</p></li>
</ol>


<p>The bottom line is &ldquo;master&rdquo; is the generated blog, and the &ldquo;source&rdquo; is the raw stuff. They are not actually branches of a source tree in a usual sense. These two branches are completely different thigs which you should never manually deal with. This is kind of a <em>hack</em> that I had to understand, and which probably was the source of quite a bit of a confusion.</p>
]]></content>
  </entry>
  
</feed>
