<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[My Web Adventures]]></title>
  <link href="http://AydinSakar.github.io/atom.xml" rel="self"/>
  <link href="http://AydinSakar.github.io/"/>
  <updated>2013-07-18T09:24:25-04:00</updated>
  <id>http://AydinSakar.github.io/</id>
  <author>
    <name><![CDATA[AydÄ±n Sakar]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Code Blocks Options with Octopress]]></title>
    <link href="http://AydinSakar.github.io/blog/2013/07/17/code-blocks-options-with-octopress/"/>
    <updated>2013-07-17T17:11:00-04:00</updated>
    <id>http://AydinSakar.github.io/blog/2013/07/17/code-blocks-options-with-octopress</id>
    <content type="html"><![CDATA[<p>I actually figured out several different options that we can use to insert code blocks with <a href="http://octopress.org/" title="Octopress">Octopress</a></p>

<h3>1. Markdown codeblocks:</h3>

<p>We have to use 4 spaces or 1 tab to designate that this is a codeblock.</p>

<pre><code>    var respond = function(response, data, err) {
        var responseObj = {data: data, error: err};
        response.writeHead(200, {"Content-Type":"application/json"});
        response.write(JSON.stringify(responseObj));
        response.end();
    };
    var arr1 = new Array(arrayLength);
    var arr2 = new Array(element0, element1, ..., elementN);
</code></pre>

<p>And this is what we get with the 4 spaces, or the tabs removed from the start of the line.</p>

<pre><code>var respond = function(response, data, err) {
    var responseObj = {data: data, error: err};
    response.writeHead(200, {"Content-Type":"application/json"});
    response.write(JSON.stringify(responseObj));
    response.end();
};
var arr1 = new Array(arrayLength);
var arr2 = new Array(element0, element1, ..., elementN);
</code></pre>

<p>And this is the HTML that is written for you:</p>

<figure class='code'><figcaption><span>HTML Result </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;pre&gt;&lt;code&gt;</span>var respond = function(response, data, err) {
</span><span class='line'>    var responseObj = {data: data, error: err};
</span><span class='line'>    response.writeHead(200, {&quot;Content-Type&quot;:&quot;application/json&quot;});
</span><span class='line'>    response.write(JSON.stringify(responseObj));
</span><span class='line'>    response.end();
</span><span class='line'>};
</span><span class='line'>var arr1 = new Array(arrayLength);
</span><span class='line'>var arr2 = new Array(element0, element1, ..., elementN);
</span><span class='line'><span class="nt">&lt;/code&gt;&lt;/pre&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>2. Backtick Code Blocks (GitHub Flavored Markdown):</h3>

<pre><code>``` [language] [title] [url] [link text]
var respond = function(response, data, err) {
    var responseObj = {data: data, error: err};
    response.writeHead(200, {"Content-Type":"application/json"});
    response.write(JSON.stringify(responseObj));
    response.end();
};
var arr1 = new Array(arrayLength);
var arr2 = new Array(element0, element1, ..., elementN);
```    
</code></pre>

<figure class='code'><figcaption><span>Backtick Code Blocks (GitHub Flavored Markdown)</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">respond</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">response</span><span class="p">,</span> <span class="nx">data</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">responseObj</span> <span class="o">=</span> <span class="p">{</span><span class="nx">data</span><span class="o">:</span> <span class="nx">data</span><span class="p">,</span> <span class="nx">error</span><span class="o">:</span> <span class="nx">err</span><span class="p">};</span>
</span><span class='line'>    <span class="nx">response</span><span class="p">.</span><span class="nx">writeHead</span><span class="p">(</span><span class="mi">200</span><span class="p">,</span> <span class="p">{</span><span class="s2">&quot;Content-Type&quot;</span><span class="o">:</span><span class="s2">&quot;application/json&quot;</span><span class="p">});</span>
</span><span class='line'>    <span class="nx">response</span><span class="p">.</span><span class="nx">write</span><span class="p">(</span><span class="nx">JSON</span><span class="p">.</span><span class="nx">stringify</span><span class="p">(</span><span class="nx">responseObj</span><span class="p">));</span>
</span><span class='line'>    <span class="nx">response</span><span class="p">.</span><span class="nx">end</span><span class="p">();</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">arr1</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Array</span><span class="p">(</span><span class="nx">arrayLength</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">arr2</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Array</span><span class="p">(</span><span class="nx">element0</span><span class="p">,</span> <span class="nx">element1</span><span class="p">,</span> <span class="p">...,</span> <span class="nx">elementN</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<h3>3. Codeblocks</h3>

<pre><code>{% codeblock [title] [lang:language] [url] [link text] %}
var respond = function(response, data, err) {
    var responseObj = {data: data, error: err};
    response.writeHead(200, {"Content-Type":"application/json"});
    response.write(JSON.stringify(responseObj));
    response.end();
};
{% endcodeblock %}
</code></pre>

<figure class='code'><figcaption><span>Javascript Example </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">respond</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">response</span><span class="p">,</span> <span class="nx">data</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">responseObj</span> <span class="o">=</span> <span class="p">{</span><span class="nx">data</span><span class="o">:</span> <span class="nx">data</span><span class="p">,</span> <span class="nx">error</span><span class="o">:</span> <span class="nx">err</span><span class="p">};</span>
</span><span class='line'>    <span class="nx">response</span><span class="p">.</span><span class="nx">writeHead</span><span class="p">(</span><span class="mi">200</span><span class="p">,</span> <span class="p">{</span><span class="s2">&quot;Content-Type&quot;</span><span class="o">:</span><span class="s2">&quot;application/json&quot;</span><span class="p">});</span>
</span><span class='line'>    <span class="nx">response</span><span class="p">.</span><span class="nx">write</span><span class="p">(</span><span class="nx">JSON</span><span class="p">.</span><span class="nx">stringify</span><span class="p">(</span><span class="nx">responseObj</span><span class="p">));</span>
</span><span class='line'>    <span class="nx">response</span><span class="p">.</span><span class="nx">end</span><span class="p">();</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">arr1</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Array</span><span class="p">(</span><span class="nx">arrayLength</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">arr2</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Array</span><span class="p">(</span><span class="nx">element0</span><span class="p">,</span> <span class="nx">element1</span><span class="p">,</span> <span class="p">...,</span> <span class="nx">elementN</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<h4>Note:</h4>

<p>For code-coloring to work, be sure you have Python27 at your Path.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[My Markdown Cheatsheet]]></title>
    <link href="http://AydinSakar.github.io/blog/2013/07/17/my-markdown-cheatsheet/"/>
    <updated>2013-07-17T15:49:00-04:00</updated>
    <id>http://AydinSakar.github.io/blog/2013/07/17/my-markdown-cheatsheet</id>
    <content type="html"><![CDATA[<p>Since this blog will also serve as my cheatsheets repository for everything I want to remember, here is my <a href="http://daringfireball.net/projects/markdown/syntax" title="Markdown">markdown</a> cheatsheet:</p>

<ul>
<li>Whenever an indentation is needed it is allways <strong>1 tab</strong> or <strong>4 spaces</strong> in markdown.</li>
</ul>


<h5>Headers:</h5>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># h1 Header 
</span><span class='line'>## h2 Header 
</span><span class='line'>### h3 Header 
</span><span class='line'>#### h4 Header 
</span><span class='line'>##### h5 Header 
</span><span class='line'>###### h6 Header </span></code></pre></td></tr></table></div></figure>


<h1>h1 Header</h1>

<h2>h2 Header</h2>

<h3>h3 Header</h3>

<h4>h4 Header</h4>

<h5>h5 Header</h5>

<h6>h6 Header</h6>

<h4>Lists:</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>* first item
</span><span class='line'>* second item
</span><span class='line'>* third item
</span><span class='line'>or
</span><span class='line'>- first item
</span><span class='line'>- second item
</span><span class='line'>- third item
</span><span class='line'>or
</span><span class='line'>+ first item
</span><span class='line'>+ second item
</span><span class='line'>+ third item</span></code></pre></td></tr></table></div></figure>


<ul>
<li>first item</li>
<li>second item</li>
<li>third item</li>
</ul>


<h4>Numbered Lists</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>1. first item
</span><span class='line'>2. second item
</span><span class='line'>3. third item</span></code></pre></td></tr></table></div></figure>


<ol>
<li>first item</li>
<li>second item</li>
<li>third item</li>
</ol>


<h4>Mix Lists</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>1. first item
</span><span class='line'>    + first item
</span><span class='line'>    + second item
</span><span class='line'>    + third item
</span><span class='line'>2. second item
</span><span class='line'>3. third item</span></code></pre></td></tr></table></div></figure>


<ol>
<li>first item

<ul>
<li>first item</li>
<li>second item</li>
<li>third item</li>
</ul>
</li>
<li>second item</li>
<li>third item</li>
</ol>


<h4>Emphasis/Strong</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>*emphasized*
</span><span class='line'>_emphasized_
</span><span class='line'>**strong**
</span><span class='line'>__strong__
</span><span class='line'>***strong emphasized***
</span><span class='line'>___strong emphasized___</span></code></pre></td></tr></table></div></figure>


<p><em>emphasized</em><br/>
<strong>strong</strong><br/>
<strong><em>strong emphasized</em></strong></p>

<h4>Code Blocks:</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>This is a code block indented by 4 spaces</span></code></pre></td></tr></table></div></figure>


<pre><code>This is a code block indented by 4 spaces and the spaces removed
</code></pre>

<h4>Blockquotes:</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&gt; This is a blockquote with two paragraphs. Lorem ipsum dolor sit amet,
</span><span class='line'>consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus.
</span><span class='line'>Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus.
</span><span class='line'>
</span><span class='line'>&gt; Donec sit amet nisl. Aliquam semper ipsum sit amet velit. Suspendisse
</span><span class='line'>id sem consectetuer libero luctus adipiscing.</span></code></pre></td></tr></table></div></figure>


<blockquote><p>This is a blockquote with two paragraphs. Lorem ipsum dolor sit amet,
consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus.
Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus.</p>

<p>Donec sit amet nisl. Aliquam semper ipsum sit amet velit. Suspendisse
id sem consectetuer libero luctus adipiscing.</p></blockquote>

<h4>Markdown in Blockquotes:</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&gt; ## This is a header.
</span><span class='line'>&gt; 
</span><span class='line'>&gt; 1.   This is the first list item.
</span><span class='line'>&gt; 2.   This is the second list item.
</span><span class='line'>&gt; 
</span><span class='line'>&gt; Here's some example code:
</span><span class='line'>&gt; 
</span><span class='line'>&gt;     return shell_exec("echo $input | $markdown_script");</span></code></pre></td></tr></table></div></figure>


<blockquote><h2>This is a header.</h2>

<ol>
<li> This is the first list item.</li>
<li> This is the second list item.</li>
</ol>


<p>Here&rsquo;s some example code:</p>

<pre><code>return shell_exec("echo $input | $markdown_script");
</code></pre></blockquote>

<h4>Blockquote in blockquote:</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&gt; This is the first level of quoting.
</span><span class='line'>&gt;
</span><span class='line'>&gt; &gt; This is nested blockquote.
</span><span class='line'>&gt;
</span><span class='line'>&gt; Back to the first level.</span></code></pre></td></tr></table></div></figure>


<blockquote><p>This is the first level of quoting.</p>

<blockquote><p>This is nested blockquote.</p></blockquote>

<p>Back to the first level.</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Fixed Layout eBooks]]></title>
    <link href="http://AydinSakar.github.io/blog/2013/07/17/fixed-layout-ebooks/"/>
    <updated>2013-07-17T12:31:00-04:00</updated>
    <id>http://AydinSakar.github.io/blog/2013/07/17/fixed-layout-ebooks</id>
    <content type="html"><![CDATA[<p>Allmost all of the eBook market is based on free-flowing eBooks, but again most of the textbooks, children books etc., are fixed page layout books.</p>

<p>Preparing fixed layout eBooks are easier now thanks to <a href="http://idpf.org/epub/30">ePub3</a> standard which is just being adapted by the industry.</p>

<p>There are not too many resources for the fixed layout books. The one I found to be very helpfull is: <a href="http://azardi.infogridpacific.com/resources.html">infogrid pacific Azardi</a>. Thanks to these guys, I could finally manage to make an iPad friendly ePub3 Fixed Layout eBook, which I plan to write a series of tutorials on the details of the process.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Octopress]]></title>
    <link href="http://AydinSakar.github.io/blog/2013/07/17/octopress/"/>
    <updated>2013-07-17T11:50:00-04:00</updated>
    <id>http://AydinSakar.github.io/blog/2013/07/17/octopress</id>
    <content type="html"><![CDATA[<p>I am using <a href="http://octopress.org/" title="Octopress">Octopress</a> to publish this blog.</p>

<p>I am using Windows 7 for daily work so had to install Octopress and GitHub on a Windows machine. I am planning to write a series of tutorials on the problems I faced making all work together with Windows.</p>

<hr />

<p>I just want to make a brief note about the confusion I had when I tried to understand Octopress: The repository structure.</p>

<p>You have to have username.github.io named repository at <a href="https://github.com/" title="GitHub">GitHub</a> to use GitHub Pages. The repository of this blog is: <a href="https://github.com/AydinSakar/aydinsakar.github.io">https://github.com/AydinSakar/aydinsakar.github.io</a> You can also have project pages, but that is another topic for a blog post.</p>

<p>Octopress manages two branches in your username.github.io repository:</p>

<ol>
<li><p>master branch:</p>

<p> This is the actual branch that GitHub uses to publish your blog. When Github sees a push to this branch, they republish your content.</p></li>
<li><p>source branch:</p>

<p> This contains the source of Octopress <em>AND</em> your blog posts. Octopress generates the content from this branch and puts everything in a &ldquo;_deploy&rdquo; directory which is the actual &ldquo;master&rdquo; branch which is then pushed to GitHub. You have to remember to commit and push the &ldquo;source&rdquo; branch yourself.</p></li>
</ol>


<p>The bottom line is &ldquo;master&rdquo; is the generated blog, and the &ldquo;source&rdquo; is the raw stuff. They are not actually branches of a source tree in a usual sense. These two branches are completely different thigs which you should never manually deal with. This is kind of a <em>hack</em> that I had to understand, and which probably was the source of quite a bit of a confusion.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Workflowy]]></title>
    <link href="http://AydinSakar.github.io/blog/2013/07/16/workflowy/"/>
    <updated>2013-07-16T08:28:00-04:00</updated>
    <id>http://AydinSakar.github.io/blog/2013/07/16/workflowy</id>
    <content type="html"><![CDATA[<h2>Workflowy Rocks!</h2>

<p>I just learned about <a href="https://workflowy.com/?ref=14e3069c">Workflowy</a>. It is a super duper easy todo/note taking/organizing/cheat sheet/mind map/brain map/whatever tool.</p>

<p>Disclaimer: I earn 250 items/month if you follow this link and register to be a member.</p>

<p>It is free to use for 500 items/month and you get 250 items/month for each person using your link to register. Pro version is $4.99/month or $49/year, which is not that bad for this fantastic tool.</p>

<p>Give it a try!</p>
]]></content>
  </entry>
  
</feed>
